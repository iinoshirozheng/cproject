#!/bin/bash
# Áï∂‰ªª‰ΩïÊåá‰ª§Âá∫ÈåØÊôÇÔºåÁ´ãÂç≥ÈÄÄÂá∫
set -e

# === ÂèñÂæóÂ∑•ÂÖ∑ÈèàËá™Ë∫´ÁöÑÁõÆÈåÑ ===
# ÈÄôÁ¢∫‰øùÁÑ°Ë´ñÂæûÂì™Ë£°Âü∑Ë°å cprojectÔºåÈÉΩËÉΩÊâæÂà∞ vcpkg Á≠âÂ∑•ÂÖ∑Ë≥áÊ∫ê
# Ëß£ÊûêÁ¨¶ËôüÈÄ£ÁµêÔºåÊâæÂà∞ËÖ≥Êú¨ÁöÑÁúüÂØ¶ÁõÆÈåÑ
TOOL_SCRIPT_DIR=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")

# --- Ëá™ÂãïËÆÄÂèñÂ∞àÊ°àÊú¨Âú∞ÁöÑ .env Ê™îÊ°à ---
if [ -f ".env" ]; then
    echo "‚Ñπ Ê≠£Âú®Âæû .env Ê™îÊ°àËºâÂÖ•Â∞àÊ°àÁí∞Â¢ÉËÆäÊï∏..."
    cat .env
    # set -a ËÆìÂæåÁ∫å source ÁöÑÊâÄÊúâËÆäÊï∏ÈÉΩËá™ÂãïË¢´ export
    set -a
    source .env
    set +a # ÊÅ¢Âæ©È†êË®≠Ë°åÁÇ∫
fi

# ==============================================================================
# === Ê†∏ÂøÉÂäüËÉΩÂáΩÊï∏ ===
# ==============================================================================

# Âü∑Ë°åÂª∫ÁΩÆ
# ÂèÉÊï∏:
# $1: Enable Tests ("true" or "false")
#„ÄêÊúÄÁµÇ‰øÆÊ≠£Áâà v2„ÄëÂ∞àÊ°àÂª∫Á´ãÂáΩÂºè
do_create() {
    local PROJECT_NAME=""
    local PROJECT_TYPE="executable"

    # 1. Ëß£ÊûêÂèÉÊï∏
    while [[ "$#" -gt 0 ]]; do
        case $1 in
            --library)
                PROJECT_TYPE="library"
                shift
                ;;
            *)
                if [[ -z "$PROJECT_NAME" ]]; then
                    PROJECT_NAME="$1"
                else
                    echo "‚ùå ÈåØË™§ÔºöÁÑ°Ê≥ïËæ®Ë≠òÁöÑÂèÉÊï∏ $1" >&2
                    exit 1
                fi
                shift
                ;;
        esac
    done

    if [[ -z "$PROJECT_NAME" ]]; then
        echo "‚ùå ÈåØË™§ÔºöË´ãÊèê‰æõÂ∞àÊ°àÂêçÁ®±„ÄÇ" >&2
        echo "   Áî®Ê≥ï: cproject create [--library] <ProjectName>" >&2
        exit 1
    fi

    local PROJECT_DIR="$(pwd)/${PROJECT_NAME}"

    if [ -d "${PROJECT_DIR}" ]; then
        echo "‚ùå ÈåØË™§ÔºöÁõÆÊ®ôË≥áÊñôÂ§æ '${PROJECT_DIR}' Â∑≤Á∂ìÂ≠òÂú®„ÄÇ" >&2
        exit 1
    fi

    echo "üõ†  Ê≠£Âú®ÁîüÊàêÂ∞àÊ°àÔºö${PROJECT_NAME}"
    echo "üî© Â∞àÊ°àÈ°ûÂûãÔºö${PROJECT_TYPE}"
    echo "üìÇ Â∞àÊ°àÁõÆÈåÑÔºö${PROJECT_DIR}"

    # 2. Âª∫Á´ãÁõÆÈåÑËàáÂéüÂßãÁ¢ºÊ™îÊ°à
    mkdir -p "${PROJECT_DIR}/src" "${PROJECT_DIR}/tests" "${PROJECT_DIR}/cmake"

    if [ "${PROJECT_TYPE}" == "library" ]; then
        echo "üìù ÂâµÂª∫ÂáΩÂºèÂ∫´Ê™îÊ°à (src/ and include/)..."
        mkdir -p "${PROJECT_DIR}/include/${PROJECT_NAME}"
        cat > "${PROJECT_DIR}/include/${PROJECT_NAME}/${PROJECT_NAME}.h" <<EOF
#pragma once
#include <string>
std::string get_lib_name();
EOF
        cat > "${PROJECT_DIR}/src/${PROJECT_NAME}.cpp" <<EOF
#include "${PROJECT_NAME}/${PROJECT_NAME}.h"
std::string get_lib_name() { return "${PROJECT_NAME}"; }
EOF
        cat > "${PROJECT_DIR}/tests/basic_test.cpp" <<EOF
#include <gtest/gtest.h>
#include "${PROJECT_NAME}/${PROJECT_NAME}.h"
TEST(LibraryTest, GetName) { EXPECT_EQ(get_lib_name(), "${PROJECT_NAME}"); }
EOF
    else
        echo "üìù ÂâµÂª∫‰∏ªÁ®ãÂºè (src/main.cpp)..."
        cat > "${PROJECT_DIR}/src/main.cpp" <<EOF
#include <iostream>
int main() { std::cout << "Hello, ${PROJECT_NAME}! üåü" << std::endl; return 0; }
EOF
        cat > "${PROJECT_DIR}/tests/basic_test.cpp" <<EOF
#include <gtest/gtest.h>
TEST(BasicTest, AssertTrue) { EXPECT_TRUE(true); }
EOF
    fi

    # 3. Áî¢ÁîüÊâÄÊúâ CMake Ëàá vcpkg Ë®≠ÂÆöÊ™î
    echo "üìù Ê≠£Âú®Áî¢Áîü vcpkg.json..."
    local LOWERCASE_PROJECT_NAME=$(echo "$PROJECT_NAME" | tr '[:upper:]' '[:lower:]')
    cat > "${PROJECT_DIR}/vcpkg.json" <<EOF
{
  "name": "${LOWERCASE_PROJECT_NAME}",
  "version-string": "1.0.0",
  "dependencies": [
    "gtest"
  ]
}
EOF

    echo "üìù Ê≠£Âú®Áî¢Áîü cmake/dependencies.cmake..."
    cat > "${PROJECT_DIR}/cmake/dependencies.cmake" <<EOF
# --- Cmake Dependency Management ---
find_package(GTest CONFIG REQUIRED)
find_package(Threads REQUIRED)
set(THIRD_PARTY_LIBS
  Threads::Threads
)
EOF

    echo "üìù Ê≠£Âú®Áî¢Áîü CMakePresets.json..."
    cat > "${PROJECT_DIR}/CMakePresets.json" <<EOF
{
  "version": 3,
  "configurePresets": [
    {
      "name": "default", "displayName": "Default Config", "description": "Default build with tests disabled.",
      "binaryDir": "\${sourceDir}/build/default",
      "cacheVariables": { "CMAKE_TOOLCHAIN_FILE": "\$env{CPROJECT_VCPKG_TOOLCHAIN}", "BUILD_TESTS": "OFF" }
    },
    {
      "name": "test", "displayName": "Test Config", "description": "Build with tests enabled.", "inherits": "default",
      "binaryDir": "\${sourceDir}/build/test",
      "cacheVariables": { "BUILD_TESTS": "ON" }
    }
  ],
  "buildPresets": [
    { "name": "default", "configurePreset": "default" }, { "name": "test", "configurePreset": "test" }
  ],
  "testPresets": [
    { "name": "default", "configurePreset": "test", "output": { "outputOnFailure": true } }
  ]
}
EOF

    echo "üìù Ê≠£Âú®Áî¢Áîü‰∏ª CMakeLists.txt..."
    if [ "${PROJECT_TYPE}" == "library" ]; then
        cat > "${PROJECT_DIR}/CMakeLists.txt" <<EOF
cmake_minimum_required(VERSION 3.18)
project(${PROJECT_NAME}
        VERSION 1.0.0
        LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
include(cmake/dependencies.cmake)
option(BUILD_TESTS "Build unit tests" ON)

if(BUILD_TESTS)
  enable_testing()
  include(GoogleTest)
endif()

add_library(${PROJECT_NAME} STATIC src/${PROJECT_NAME}.cpp)
target_include_directories(${PROJECT_NAME} PUBLIC \${CMAKE_CURRENT_SOURCE_DIR}/include)
target_link_libraries(${PROJECT_NAME} PRIVATE \${THIRD_PARTY_LIBS})

if(BUILD_TESTS)
  add_executable(run_tests tests/basic_test.cpp)
  # „ÄêÂ∑≤‰øÆÊ≠£„Äë‰ΩøÁî® vcpkg Êèê‰æõÁöÑÂ∞èÂØ´ target ÂêçÁ®±
  target_link_libraries(run_tests PRIVATE ${PROJECT_NAME} GTest::gtest GTest::gtest_main)
  gtest_discover_tests(run_tests)
endif()
EOF
    else # executable
        cat > "${PROJECT_DIR}/CMakeLists.txt" <<EOF
cmake_minimum_required(VERSION 3.18)
project(${PROJECT_NAME}
        VERSION 1.0.0
        LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
include(cmake/dependencies.cmake)
option(BUILD_TESTS "Build unit tests" ON)

if(BUILD_TESTS)
  enable_testing()
  include(GoogleTest)
endif()

add_executable(${PROJECT_NAME} src/main.cpp)
target_link_libraries(${PROJECT_NAME} PRIVATE \${THIRD_PARTY_LIBS})

if(BUILD_TESTS)
  add_executable(run_tests tests/basic_test.cpp)
  # „ÄêÂ∑≤‰øÆÊ≠£„Äë‰ΩøÁî® vcpkg Êèê‰æõÁöÑÂ∞èÂØ´ target ÂêçÁ®±
  target_link_libraries(run_tests PRIVATE GTest::gtest GTest::gtest_main)
  gtest_discover_tests(run_tests)
endif()
EOF
    fi

    echo "üéâ Â∞àÊ°à ${PROJECT_NAME} Â∑≤ÊàêÂäüÁîüÊàêÔºÅ"
    echo ""
    echo "‰∏ã‰∏ÄÊ≠•:"
    echo " cd ${PROJECT_NAME}"
    echo " cproject build"
}


do_build() {
    local enable_tests="$1"
    local preset_name="default"
    if [[ "${enable_tests}" == "true" ]]; then
        preset_name="test"
    fi

    local project_dir; project_dir="$(pwd)"
    local build_dir="${project_dir}/build/${preset_name}" # Build dir is defined by preset
    local cmake_file="${project_dir}/CMakeLists.txt"
    local vcpkg_toolchain_file="${TOOL_SCRIPT_DIR}/vcpkg/scripts/buildsystems/vcpkg.cmake"

    if [[ ! -f "${cmake_file}" || ! -f "${project_dir}/CMakePresets.json" ]]; then
        echo "‚ùå ÈåØË™§ÔºöÊâæ‰∏çÂà∞ CMakeLists.txt Êàñ CMakePresets.json„ÄÇ" >&2
        exit 1
    fi

    # --- ÈÄèÈÅéÁí∞Â¢ÉËÆäÊï∏ÂÇ≥ÈÅûÂ∑•ÂÖ∑ÈèàË∑ØÂæëÁµ¶ Preset ---
    export CPROJECT_VCPKG_TOOLCHAIN="${vcpkg_toolchain_file}"

    if [ -d "${build_dir}" ]; then
        echo "üßπ Ê≠£Âú®ÁßªÈô§ËàäÁöÑ build ÁõÆÈåÑ: ${build_dir}"
        rm -rf "${build_dir}"
    fi

    echo "‚öôÔ∏è  Âü∑Ë°å CMake ÈÖçÁΩÆ (Preset: ${preset_name})..."
    cmake --preset "${preset_name}"

    echo "üî® Á∑®Ë≠Ø‰∏≠ (Preset: ${preset_name})..."
    cmake --build --preset "${preset_name}"

    echo "‚úÖ Âª∫ÁΩÆÂÆåÊàêÔºÅ"

    local project_name
    project_name="$(grep -E '^[[:space:]]*project\(' "${cmake_file}" | head -n1 | sed -E 's/^[[:space:]]*project\(\s*([A-Za-z0-9_]+).*/\1/')"
    copy_artifacts "${project_name}" "${project_dir}" "${build_dir}" "${project_dir}/bin" "${project_dir}/lib"
}

# Âü∑Ë°åÊ∏¨Ë©¶
#„ÄêÊï¥ÂêàÁâà„ÄëÂü∑Ë°åÊ∏¨Ë©¶ÂáΩÂºèÔºåÊ†πÊìöÂèÉÊï∏Ê±∫ÂÆöÊ®°Âºè
do_test() {
    local is_ci_mode=false
    # Ê≠•È©ü 1: Ëß£ÊûêÂÇ≥ÂÖ• do_test ÁöÑÂèÉÊï∏
    if [[ "$1" == "--detail" ]]; then
        is_ci_mode=true
    fi

    # Ê≠•È©ü 2: ÁÑ°Ë´ñ‰ΩïÁ®ÆÊ®°ÂºèÔºåÈÉΩÂÖàÂª∫ÁΩÆÊ∏¨Ë©¶
    do_build "true"

    # Ê≠•È©ü 3: Ê†πÊìöÊ®°ÂºèÂü∑Ë°å‰∏çÂêåÁöÑÊ∏¨Ë©¶ÊñπÊ≥ï
    if [[ "$is_ci_mode" == "true" ]]; then
        # --- CI/CD Ê®°Âºè ---
        echo "ü§ñ Âü∑Ë°å CI/CD Ê∏¨Ë©¶ (Preset: default)..."
        
        # --output-on-failure: Âè™ÊúâÂú®Ê∏¨Ë©¶Â§±ÊïóÊôÇÊâçÈ°ØÁ§∫Ë©≥Á¥∞Êó•Ë™å
        # --output-junit: Áî¢Áîü Jenkins, GitHub Actions Á≠âÂ∑•ÂÖ∑Áõ∏ÂÆπÁöÑÂ†±Âëä
        ctest --preset default --output-on-failure --output-junit "ctest_results.xml"

        echo "‚úÖ CI/CD Ê∏¨Ë©¶ÂÆåÊàêÔºåÂ†±ÂëäÂ∑≤ÂÑ≤Â≠òËá≥ ctest_results.xml"
    else
        # --- ÈñãÁôºËÄÖ‰∫íÂãïÊ®°Âºè ---
        local test_executable_path="./build/test/run_tests"

        if [ -f "${test_executable_path}" ]; then
            echo "üèÉ‚Äç‚ôÇÔ∏è Áõ¥Êé•Âü∑Ë°å Google Test (${test_executable_path})..."
            echo "------------------------------------------"
            # Áõ¥Êé•Âü∑Ë°åÔºåÊ≠§ÊôÇ Google Test ÊúÉÂÅµÊ∏¨Âà∞ TTY ‰∏¶Ëº∏Âá∫È°èËâ≤
            "${test_executable_path}"
            echo "------------------------------------------"
            echo "‚úÖ Ê∏¨Ë©¶ÂÆåÊàê„ÄÇ"
        else
            echo "‚ùå ÈåØË™§ÔºöÊâæ‰∏çÂà∞Ê∏¨Ë©¶Âü∑Ë°åÊ™îÊñº ${test_executable_path}" >&2
            exit 1
        fi
    fi
}

# Âü∑Ë°å‰∏ªÁ®ãÂºè
do_run() {
    local project_dir
    project_dir="$(pwd)"
    local bin_dir="${project_dir}/bin"

    # --- Ëß£ÊûêÂ∞àÊ°àÂêçÁ®± (ÈáçË§áËß£Êûê‰ª•Á¢∫‰øùÁç®Á´ãÊÄß) ---
    local cmake_file="${project_dir}/CMakeLists.txt"
    if [[ ! -f "${cmake_file}" ]]; then
        echo "‚ùå ÈåØË™§ÔºöÊâæ‰∏çÂà∞ CMakeLists.txt„ÄÇ" >&2
        exit 1
    fi
    local project_name
    project_name="$(grep -E '^[[:space:]]*project\(' "${cmake_file}" | head -n1 | sed -E 's/^[[:space:]]*project\(\s*([A-Za-z0-9_]+).*/\1/')"

    # È¶ñÂÖàÔºåÁ¢∫‰øùÂ∞àÊ°àÂ∑≤Âª∫ÁΩÆ
    do_build "false"

    local executable_path="${bin_dir}/${project_name}"

    if [[ ! -x "${executable_path}" ]]; then
        echo "‚ùå ÈåØË™§ÔºöÊâæ‰∏çÂà∞ÂèØÂü∑Ë°åÁöÑÊ™îÊ°àÊàñÂ∞àÊ°àÊòØÂáΩÂºèÂ∫´„ÄÇ" >&2
        echo "   È†êÊúüË∑ØÂæë: ${executable_path}" >&2
        # Ê™¢Êü•ÊòØÂê¶ÁÇ∫ÂáΩÂºèÂ∫´
        if [[ -d "${project_dir}/lib" ]]; then
            echo "‚ÑπÔ∏è  ÂÅµÊ∏¨Âà∞ lib ÁõÆÈåÑÔºåÂ∞àÊ°à '${project_name}' ÂèØËÉΩÊòØ‰∏ÄÂÄãÂáΩÂºèÂ∫´ÔºåÊ≤íÊúâ‰∏ªÁ®ãÂºèÂèØÂü∑Ë°å„ÄÇ"
        fi
        exit 1
    fi

    echo "üöÄ Âü∑Ë°å‰∏ªÁ®ãÂºè..."
    echo "------------------------------------------"
    "${executable_path}"
    echo "------------------------------------------"
    echo "‚úÖ Á®ãÂºèÂü∑Ë°åÂÆåÁï¢„ÄÇ"
}


# Ë§áË£ΩÁî¢Âá∫Áâ© (ÂáΩÂºèÂ∫´ÊàñÂü∑Ë°åÊ™î)
copy_artifacts() {
    local project_name="$1"
    local project_dir="$2"
    local build_dir="$3"
    local bin_dir="$4"
    local lib_dir="$5"

    echo "üì¶ Ê≠£Âú®ËôïÁêÜÂª∫ÁΩÆÁî¢Âá∫..."

    # Ê∏ÖÁêÜËàäÁöÑÁî¢Âá∫ÁõÆÈåÑ
    rm -rf "${bin_dir}" "${lib_dir}"

    # Â∞ãÊâæÂü∑Ë°åÊ™î
    local executable_path
    executable_path=$(find "${build_dir}" -maxdepth 2 -type f -name "${project_name}")

    # Â∞ãÊâæÂáΩÂºèÂ∫´
    local lib_path
    lib_path=$(find "${build_dir}" -maxdepth 2 -type f \( -name "lib${project_name}.a" -o -name "lib${project_name}.so" -o -name "lib${project_name}.dylib" \))


    if [[ -n "${executable_path}" ]]; then
        echo " -> ÊâæÂà∞Âü∑Ë°åÊ™îÔºåÊ≠£Âú®Ë§áË£ΩÂà∞ ${bin_dir}..."
        mkdir -p "${bin_dir}"
        cp "${executable_path}" "${bin_dir}/"
    elif [[ -n "${lib_path}" ]]; then
        echo " -> ÊâæÂà∞ÂáΩÂºèÂ∫´ÔºåÊ≠£Âú®Ë§áË£ΩÂà∞ ${lib_dir}..."
        mkdir -p "${lib_dir}"
        find "${build_dir}" -maxdepth 2 -type f \( -name "lib${project_name}.a" -o -name "lib${project_name}.so" -o -name "lib${project_name}.dylib" \) -exec cp {} "${lib_dir}/" \;
        if [ -d "${project_dir}/include" ]; then
            echo " -> Ê≠£Âú®Ë§áË£ΩÂÖ¨ÈñãÊ®ôÈ†≠Ê™î..."
            mkdir -p "${lib_dir}/include"
            rsync -a --delete "${project_dir}/include/" "${lib_dir}/include/"
        fi
    else
        echo "‚ö†Ô∏è  Ë≠¶ÂëäÔºöÂú® ${build_dir} ‰∏≠Êâæ‰∏çÂà∞‰ªª‰ΩïÈ†êÊúüÁöÑÂü∑Ë°åÊ™îÊàñÂáΩÂºèÂ∫´„ÄÇ"
        return 1
    fi

    echo "‚úÖ Áî¢Âá∫Ë§áË£ΩÂÆåÊàê„ÄÇ"
}

do_pkg_search() {
    local lib_name="$1"
    if [[ -z "$lib_name" ]]; then
        echo "‚ùå ÈåØË™§ÔºöË´ãÊèê‰æõË¶ÅÊêúÂ∞ãÁöÑÂáΩÂºèÂ∫´ÂêçÁ®±„ÄÇ" >&2
        echo "   Áî®Ê≥ï: cproject pkg search <lib-name>" >&2
        exit 1
    fi
    echo "üîé Ê≠£Âú®ÈÄèÈÅé vcpkg search ÊêúÂ∞ã '${lib_name}'..."
    vcpkg search "$lib_name"
}

# --- pkg add ---
do_pkg_add() {
    local lib_name="$1"

    # --- ÂâçÁΩÆÊ™¢Êü• ---
    if ! command -v jq &> /dev/null; then echo "‚ùå ÈåØË™§ÔºöÊ≠§ÂäüËÉΩÈúÄË¶Å 'jq'„ÄÇ" >&2; exit 1; fi
    if ! command -v vcpkg &> /dev/null; then echo "‚ùå ÈåØË™§ÔºöÊâæ‰∏çÂà∞ 'vcpkg' Êåá‰ª§„ÄÇ" >&2; exit 1; fi
    if [[ -z "$lib_name" ]]; then echo "‚ùå ÈåØË™§ÔºöË´ãÊèê‰æõÂáΩÂºèÂ∫´ÂêçÁ®±„ÄÇ" >&2; echo "   Áî®Ê≥ï: cproject pkg add <lib-name>" >&2; exit 1; fi
    local vcpkg_file="vcpkg.json"
    local cmake_deps_file="cmake/dependencies.cmake"
    if [[ ! -f "${vcpkg_file}" || ! -f "${cmake_deps_file}" ]]; then echo "‚ùå ÈåØË™§ÔºöÊâæ‰∏çÂà∞Ë®≠ÂÆöÊ™îÔºåË´ãÁ¢∫Ë™ç‰ΩçÊñºÂ∞àÊ°àÊ†πÁõÆÈåÑ‰∏ã„ÄÇ" >&2; exit 1; fi

    # --- vcpkg search È©óË≠â ---
    echo "üîé Ê≠£Âú®ÈÄèÈÅé vcpkg search È©óË≠âÂáΩÂºèÂ∫´ '${lib_name}'..."
    local search_result; search_result=$(vcpkg search "$lib_name")
    local exact_match; exact_match=$(echo "${search_result}" | grep -E "^${lib_name}[[:space:]]" | head -n 1)
    if [[ -z "$exact_match" ]]; then
        echo "‚ùå ÈåØË™§ÔºöÂú® vcpkg ‰∏≠Êâæ‰∏çÂà∞ÂêçÁÇ∫ '${lib_name}' ÁöÑÂáΩÂºèÂ∫´„ÄÇ" >&2
        echo "   ÊúÄÊé•ËøëÁöÑÊêúÂ∞ãÁµêÊûúÂ¶Ç‰∏ãÔºö" >&2; echo "${search_result}" >&2; exit 1;
    fi
    echo "‚úÖ ÊâæÂà∞Áõ∏Á¨¶ÁöÑÂáΩÂºèÂ∫´: ${exact_match}"

    # --- Êõ¥Êñ∞ vcpkg.json ---
    if ! jq -e ".dependencies[] | select(. == \"$lib_name\")" "${vcpkg_file}" > /dev/null; then
        echo "üìù Ê≠£Âú®Â∞á '${lib_name}' Âä†ÂÖ•Âà∞ ${vcpkg_file}..."
        jq --arg lib "$lib_name" '.dependencies |= . + [$lib] | .dependencies |= unique' "${vcpkg_file}" > "${vcpkg_file}.tmp" && mv "${vcpkg_file}.tmp" "${vcpkg_file}"
    fi

    # --- Âü∑Ë°å vcpkg install ‰∏¶ÊçïÁç≤Ëº∏Âá∫ ---
    echo "üì¶ Ê≠£Âú®ÂÆâË£ù‰æùË≥¥... (vcpkg install)"
    local install_output; install_output=$(vcpkg install | tee /dev/tty)

    # --- Ëß£Êûê vcpkg Ëº∏Âá∫‰ª•ÂèñÂæó CMake Áî®Ê≥ï ---
    echo "‚öôÔ∏è  Ê≠£Âú®Ëß£Êûê CMake Áî®Ê≥ï..."
    local usage_block; usage_block=$(echo "${install_output}" | awk -v lib="${lib_name}" '/The package/ && $3==lib {p=1} p && /^$/ {p=0} p')
    local package_name; package_name=$(echo "${usage_block}" | grep "find_package" | sed -E 's/.*find_package\(([^ ]+).*/\1/')
    local link_targets; link_targets=$(echo "${usage_block}" | grep "target_link_libraries" | sed -E 's/.*(PRIVATE|PUBLIC|INTERFACE) //; s/\).*//')

    # --- ‰ΩøÁî®Ëß£ÊûêÂà∞ÁöÑË≥áË®äÊõ¥Êñ∞ cmake/dependencies.cmake ---
    if [[ -n "$package_name" && -n "$link_targets" ]]; then
        if grep -q "find_package(${package_name} " "${cmake_deps_file}"; then
            echo "‚ÑπÔ∏è  '${package_name}' ÁúãËµ∑‰æÜÂ∑≤Á∂ìË®≠ÂÆöÂú® ${cmake_deps_file} ‰∏≠ÔºåË∑≥ÈÅé„ÄÇ"
        else
            echo "üìù Ê≠£Âú®‰ΩøÁî®Á≤æÁ¢∫ÁöÑ target Ëá™ÂãïÊõ¥Êñ∞ ${cmake_deps_file}..."
            echo "" >> "${cmake_deps_file}"
            echo "# Added by 'cproject pkg add' for ${lib_name}" >> "${cmake_deps_file}"
            echo "find_package(${package_name} CONFIG REQUIRED)" >> "${cmake_deps_file}"
            echo "list(APPEND THIRD_PARTY_LIBS ${link_targets})" >> "${cmake_deps_file}"
        fi
    else
        echo "‚ö†Ô∏è Ë≠¶ÂëäÔºöÁÑ°Ê≥ïËá™ÂãïËß£Êûê '${lib_name}' ÁöÑ CMake Áî®Ê≥ïÔºåÊÇ®ÂèØËÉΩÈúÄË¶ÅÊâãÂãï‰øÆÊîπ ${cmake_deps_file}„ÄÇ"
    fi

    echo ""
    echo "‚úÖ ÊàêÂäüÊñ∞Â¢û‰∏¶ÂÆâË£ù‰æùË≥¥ '${lib_name}'ÔºÅ"
}

# --- pkg rm ---
do_pkg_rm() {
    local lib_name="$1"

    # --- ÂâçÁΩÆÊ™¢Êü• ---
    if ! command -v jq &> /dev/null; then echo "‚ùå ÈåØË™§ÔºöÊ≠§ÂäüËÉΩÈúÄË¶Å 'jq'„ÄÇ" >&2; exit 1; fi
    if [[ -z "$lib_name" ]]; then echo "‚ùå ÈåØË™§ÔºöË´ãÊèê‰æõÂáΩÂºèÂ∫´ÂêçÁ®±„ÄÇ" >&2; echo "   Áî®Ê≥ï: cproject pkg rm <lib-name>" >&2; exit 1; fi
    local vcpkg_file="vcpkg.json"
    local cmake_deps_file="cmake/dependencies.cmake"
    if [[ ! -f "${vcpkg_file}" || ! -f "${cmake_deps_file}" ]]; then echo "‚ùå ÈåØË™§ÔºöÊâæ‰∏çÂà∞Ë®≠ÂÆöÊ™îÔºåË´ãÁ¢∫Ë™ç‰ΩçÊñºÂ∞àÊ°àÊ†πÁõÆÈåÑ‰∏ã„ÄÇ" >&2; exit 1; fi

    # --- Ê≠•È©ü 1: Âæû vcpkg.json ÁßªÈô§ ---
    if jq -e ".dependencies[] | select(. == \"$lib_name\")" "${vcpkg_file}" > /dev/null; then
        echo "üìù Ê≠£Âú®Âæû ${vcpkg_file} ‰∏≠ÁßªÈô§ '${lib_name}'..."
        jq "del(.dependencies[] | select(. == \"$lib_name\"))" "${vcpkg_file}" > "${vcpkg_file}.tmp" && mv "${vcpkg_file}.tmp" "${vcpkg_file}"
    else
        echo "‚ÑπÔ∏è  ‰æùË≥¥ '${lib_name}' ‰∏çÂ≠òÂú®Êñº ${vcpkg_file} ‰∏≠ÔºåÁÑ°ÈúÄÁßªÈô§„ÄÇ"
    fi

    # --- Ê≠•È©ü 2: Âæû cmake/dependencies.cmake ÁßªÈô§ ---
    # ÈÄôÂÄãÈÇèËºØÁöÑÊ†∏ÂøÉÊòØÂ∞ãÊâæÁï∂Âàù add Êåá‰ª§Áïô‰∏ãÁöÑË®ªËß£Ê®ôË®ò
    local anchor_comment="# Added by 'cproject pkg add' for ${lib_name}"
    
    # ÂÖàÊ™¢Êü•Ê®ôË®òÊòØÂê¶Â≠òÂú®
    if grep -qF "${anchor_comment}" "${cmake_deps_file}"; then
        echo "üìù Ê≠£Âú®Âæû ${cmake_deps_file} ‰∏≠ÁßªÈô§ '${lib_name}' ÁöÑ CMake Ë®≠ÂÆö..."
        
        # ‰ΩøÁî® sed ÊâæÂà∞Ê®ôË®òË°å(anchor)Ôºå‰∏¶Â∞áÂÖ∂ÂèäÂæåÁ∫åÂÖ©Ë°å‰∏Ä‰ΩµÂà™Èô§
        # sed -i Âú®‰∏çÂêåÁ≥ªÁµ±Ë°åÁÇ∫ÊúâÂ∑ÆÁï∞Ôºå‰ΩøÁî®Ëá®ÊôÇÊ™îÊ°àÊõ¥ÁÇ∫ÂèØÈù†ÂÆâÂÖ®
        sed "/${anchor_comment}/{N;N;d;}" "${cmake_deps_file}" > "${cmake_deps_file}.tmp" && mv "${cmake_deps_file}.tmp" "${cmake_deps_file}"
        
        # ÁßªÈô§ÂèØËÉΩÁïô‰∏ãÁöÑÂ§öÈ§òÁ©∫Ë°åÔºåËÆìÊ™îÊ°àÊõ¥Êï¥ÊΩî
        sed -i.bak '/^$/N;/^\n$/D' "${cmake_deps_file}" && rm -f "${cmake_deps_file}.bak"

    else
        echo "‚ÑπÔ∏è  Âú® ${cmake_deps_file} ‰∏≠Êâæ‰∏çÂà∞ '${lib_name}' Â∞çÊáâÁöÑË®≠ÂÆöÂçÄÂ°äÔºåÁÑ°ÈúÄÁßªÈô§„ÄÇ"
    fi

    # --- Ê≠•È©ü 3: ÊèêÁ§∫‰ΩøÁî®ËÄÖ ---
    echo ""
    echo "‚úÖ ÊàêÂäüÂæûË®≠ÂÆöÊ™î‰∏≠ÁßªÈô§‰æùË≥¥ '${lib_name}'ÔºÅ"
    echo "   vcpkg ÊúÉÂú®‰∏ãÊ¨°Âª∫ÁΩÆÊôÇËá™ÂãïÊ∏ÖÁêÜ‰∏çÂÜçÈúÄË¶ÅÁöÑÂ•ó‰ª∂„ÄÇ"
    echo "   ÊÇ®ÂèØ‰ª•Âü∑Ë°å 'cproject build' ‰æÜÊõ¥Êñ∞Â∞àÊ°àÁãÄÊÖã„ÄÇ"
}

# ==============================================================================
# === ÂëΩ‰ª§ÂàÜÊ¥æÂô® ===
# ==============================================================================

# --- ‰ΩøÁî®Ë™™Êòé ---
usage() {
    cat <<EOF
üìò cproject - Áèæ‰ª£ÂåñÁöÑ C++ Â∞àÊ°àÁÆ°ÁêÜÂô®

Áî®Ê≥ï:
  cproject <command> [options]

ÂëΩ‰ª§:
  Â∏∏Áî®Êåá‰ª§
    create [--library] <ProjectName>
      ‚û§ Âª∫Á´ã‰∏ÄÂÄãÊñ∞ÁöÑ C++ Â∞àÊ°à„ÄÇ
    build
      ‚û§ Âª∫ÁΩÆÁï∂ÂâçÂ∞àÊ°à„ÄÇ
    run
      ‚û§ Âª∫ÁΩÆ‰∏¶Âü∑Ë°åÁï∂ÂâçÂ∞àÊ°àÁöÑ‰∏ªÁ®ãÂºè„ÄÇ
    test [--detail]
      ‚û§ Âü∑Ë°åÊ∏¨Ë©¶ (‰ΩøÁî® --detail ‰ª• Ctest Ê®°ÂºèÂü∑Ë°å)„ÄÇ

  Â•ó‰ª∂ÁÆ°ÁêÜ
    add <lib-name>
      ‚û§ (Êé®Ëñ¶) Êñ∞Â¢û‰∏¶ÂÆâË£ù‰∏ÄÂÄãÂ•ó‰ª∂„ÄÇ
    remove <lib-name>
      ‚û§ ÁßªÈô§‰∏ÄÂÄãÂ•ó‰ª∂„ÄÇ
    search <lib-name>
      ‚û§ ÊêúÂ∞ãÂ•ó‰ª∂„ÄÇ
    pkg <add|remove|search>
      ‚û§ (ÂÆåÊï¥Êåá‰ª§) Âü∑Ë°åÂ•ó‰ª∂ÁÆ°ÁêÜÂ≠êÂëΩ‰ª§„ÄÇ

ÁØÑ‰æã:
  cproject create MyApp
  cproject add fmt
  cproject build
EOF
    exit 1
}

# --- ‰∏ªÈÇèËºØ ---
if [[ $# -lt 1 ]]; then
    echo "‚ö†Ô∏è  Ë´ãÊèê‰æõ‰∏ÄÂÄãÂëΩ‰ª§„ÄÇ" >&2
    usage
fi

SUBCMD="$1"; shift

case "$SUBCMD" in
    # --- Â∞àÊ°àÁîüÂëΩÈÄ±ÊúüÊåá‰ª§ ---
    create)
        do_create "$@"
        ;;
    build)
        do_build "false"
        ;;
    run)
        do_run
        ;;
    test)
        do_test "$@"
        ;;

    # --- „ÄêÊñ∞Â¢û„ÄëÂ•ó‰ª∂ÁÆ°ÁêÜÁöÑÂø´Êç∑Êåá‰ª§ (Aliases) ---
    add)
        do_pkg_add "$@"
        ;;
    remove)
        do_pkg_rm "$@"
        ;;
    search)
        do_pkg_search "$@"
        ;;

    # --- Â•ó‰ª∂ÁÆ°ÁêÜÁöÑÂÆåÊï¥Êåá‰ª§ ---
    pkg)
        PKG_SUBCMD="$1"; shift
        case "$PKG_SUBCMD" in
            add)
                do_pkg_add "$@"
                ;;
            remove)
                do_pkg_rm "$@"
                ;;
            search)
                do_pkg_search "$@"
                ;;
            *)
                echo "‚ùå Êú™Áü•ÁöÑ pkg Â≠êÂëΩ‰ª§: '$PKG_SUBCMD'" >&2
                usage
                ;;
        esac
        ;;
        
    *)
        echo "‚ùå Êú™Áü•ÂëΩ‰ª§: $SUBCMD" >&2
        usage
        ;;
esac